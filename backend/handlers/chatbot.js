// backend/handlers/chatbot.js
const Empresa = require('../models/Empresa');
const { gerarRespostaGemini } = require('../gemini');
const { processarImagemOCR, gerarRespostaOCR } = require('./ocrHandler');
const { enviarMensagemParaContato } = require('../botManager');

// Importa√ß√£o condicional dos m√≥dulos
let searchInChrome;
let consultarFuncionario;

try {
  const chromeModule = require('../DesbloqueioREP');
  searchInChrome = chromeModule.searchInChrome;
} catch (error) {
  console.log('‚ö†Ô∏è M√≥dulo DesbloqueioREP n√£o encontrado');
  searchInChrome = null;
}

try {
  const funcionarioModule = require('../CadastroFuncionarios');
  consultarFuncionario = funcionarioModule.consultarFuncionario;
  console.log('‚úÖ M√≥dulo CadastroFuncionarios carregado.');
} catch (err) {
  console.error('‚ùå Erro ao carregar CadastroFuncionarios:', err.message);
  consultarFuncionario = null;
}

// Vari√°veis para controle de estado da conversa
const usuariosEmFluxoREP = new Map();
const usuariosEmConsultaFuncionario = new Map();

/**
 * FUN√á√ÉO PRINCIPAL - Processa todas as mensagens recebidas
 */
async function handleMensagem(empresaId, mensagemUsuario, sender = null, isMedia = false, mediaBuffer = null) {
  try {
    const empresa = await Empresa.findById(empresaId);
    if (!empresa) {
      return { resposta: '‚ö†Ô∏è Empresa n√£o encontrada.' };
    }

    // ‚úÖ 1. VERIFICA SE √â UMA IMAGEM DO REP
    if (isMedia && mediaBuffer) {
      return await processarImagemREP(mediaBuffer, sender, empresaId);
    }

    // ‚úÖ 2. VERIFICA SE USU√ÅRIO EST√Å EM FLUXO DE CONSULTA DE FUNCION√ÅRIO
    if (usuariosEmConsultaFuncionario.has(sender)) {
      return await processarConsultaFuncionario(mensagemUsuario, sender, empresa);
    }

    // ‚úÖ 3. VERIFICA SE USU√ÅRIO EST√Å EM FLUXO DE DESBLOQUEIO REP
    if (usuariosEmFluxoREP.has(sender)) {
      return await processarFluxoREP(mensagemUsuario, sender);
    }

    // ‚úÖ 4. VERIFICA SE √â PROBLEMA NO PONTO (ativa fluxo)
    const resultadoProblemaPonto = await verificarProblemaPonto(mensagemUsuario, sender);
    if (resultadoProblemaPonto.deveResponder) {
      return { resposta: resultadoProblemaPonto.resposta };
    }

    // ‚úÖ 5. VERIFICA SE √â CONSULTA DE FUNCION√ÅRIO (ativa fluxo)
    const resultadoConsultaFuncionario = await verificarConsultaFuncionario(mensagemUsuario, sender);
    if (resultadoConsultaFuncionario.deveResponder) {
      return { resposta: resultadoConsultaFuncionario.resposta };
    }

    // ‚úÖ 6. USA IA GEMINI PARA OUTRAS MENSAGENS
    return await processarMensagemIA(mensagemUsuario, empresa);

  } catch (error) {
    console.error('‚ùå Erro no handleMensagem:', error);
    return { resposta: '‚ö†Ô∏è Ocorreu um erro ao processar sua mensagem.' };
  }
}

/**
 * PROCESSAR IMAGEM DO REP
 */
async function processarImagemREP(mediaBuffer, sender, empresaId) {
  try {
    console.log('üì∏ Processando imagem do REP...');

    const resultadoOCR = await processarImagemOCR(mediaBuffer);

    if (resultadoOCR.sucesso && resultadoOCR.dadosREP.numeroREP && resultadoOCR.dadosREP.senha) {
      // ‚úÖ DADOS COMPLETOS - EXECUTA DESBLOQUEIO
      const telefoneLimpo = sender ? sender.replace('@s.whatsapp.net', '').replace(/\D/g, '') : null;
      const empresa = await Empresa.findById(empresaId);
      const nomeEmpresa = empresa ? empresa.nome : null;

      usuariosEmFluxoREP.delete(sender);

      if (searchInChrome && nomeEmpresa) {
        executarDesbloqueioREP(sender, telefoneLimpo, resultadoOCR.dadosREP, nomeEmpresa);
      }

      return {
        resposta: `‚úÖ *Dados identificados com sucesso!*\n\n` +
          `üî¢ *REP:* ${resultadoOCR.dadosREP.numeroREP}\n` +
          `üîë *Senha:* ${resultadoOCR.dadosREP.senha}\n\n` +
          `üîÑ *Processando desbloqueio...*\n` +
          `_Aguarde aproximadamente 1 minuto_`
      };
    } else {
      // ‚ùå DADOS INCOMPLETOS - MANT√âM NO FLUXO
      return await processarImagemIncompleta(resultadoOCR, sender);
    }

  } catch (error) {
    console.error('‚ùå Erro ao processar imagem REP:', error);
    return await processarErroImagem(sender);
  }
}

/**
 * PROCESSAR IMAGEM COM DADOS INCOMPLETOS
 */
async function processarImagemIncompleta(resultadoOCR, sender) {
  let usuarioFluxo = usuariosEmFluxoREP.get(sender) || {
    etapa: 'aguardando_imagem',
    tentativas: 0,
    dados: {}
  };

  usuarioFluxo.tentativas += 1;
  usuariosEmFluxoREP.set(sender, usuarioFluxo);

  let resposta = '';
  const temDadosParciais = resultadoOCR.dadosREP.numeroREP || resultadoOCR.dadosREP.senha;

  if (temDadosParciais) {
    resposta = `üìã *Dados parciais identificados:*\n\n`;
    if (resultadoOCR.dadosREP.numeroREP) {
      resposta += `‚úÖ REP: ${resultadoOCR.dadosREP.numeroREP}\n`;
    } else {
      resposta += `‚ùå REP: N√£o identificado\n`;
    }

    if (resultadoOCR.dadosREP.senha) {
      resposta += `‚úÖ Senha: ${resultadoOCR.dadosREP.senha}\n`;
    } else {
      resposta += `‚ùå Senha: N√£o identificada\n`;
    }

    resposta += `\nüì∏ *Envie outra foto mais n√≠tida* para completar os dados.`;
  } else {
    resposta = `‚ùå *N√£o consegui identificar os dados do REP*\n\n` +
      `üì∏ *Por favor, envie outra foto mais n√≠tida* mostrando:\n` +
      `‚Ä¢ N√∫mero do REP (15-18 d√≠gitos)\n` +
      `‚Ä¢ Senha/Contra Senha (10 d√≠gitos)\n\n` +
      `üí° *Dica:* Garanta boa ilumina√ß√£o e foco na √°rea dos n√∫meros.`;
  }

  // ‚úÖ VERIFICA M√ÅXIMO DE TENTATIVAS
  if (usuarioFluxo.tentativas >= 3) {
    usuariosEmFluxoREP.delete(sender);
    resposta += `\n\n‚ö†Ô∏è *M√°ximo de tentativas atingido (3).*\n` +
      `_Entre em contato com o suporte t√©cnico para assist√™ncia personalizada._`;
  } else {
    resposta += `\n\nüîÑ _Tentativa ${usuarioFluxo.tentativas} de 3_`;
  }

  return { resposta };
}

/**
 * PROCESSAR ERRO NA IMAGEM
 */
async function processarErroImagem(sender) {
  let usuarioFluxo = usuariosEmFluxoREP.get(sender) || {
    etapa: 'aguardando_imagem',
    tentativas: 0,
    dados: {}
  };

  usuarioFluxo.tentativas += 1;
  usuariosEmFluxoREP.set(sender, usuarioFluxo);

  let resposta = '‚ùå *Erro ao processar a imagem*\n\n';

  if (usuarioFluxo.tentativas < 3) {
    resposta += `üì∏ *Envie outra foto mais n√≠tida* do REP.\n\n` +
      `üîÑ _Tentativa ${usuarioFluxo.tentativas} de 3_`;
  } else {
    usuariosEmFluxoREP.delete(sender);
    resposta += `‚ö†Ô∏è *M√°ximo de tentativas atingido.*\n` +
      `_Entre em contato com o suporte t√©cnico para assist√™ncia adicional._`;
  }

  return { resposta };
}

/**
 * VERIFICAR PROBLEMAS NO PONTO
 */
async function verificarProblemaPonto(mensagem, sender) {
  const texto = mensagem.toLowerCase().trim();

  const palavrasProblemaPonto = [
    'n√£o acessa', 'ponto n√£o acessa', 'ponto parou', 'ponto bloqueado',
    'problema no ponto', 'problema ponto', 'ponto com erro', 'erro no ponto',
    'rep bloqueado', 'rep n√£o funciona', '1602', '1603', 'desbloquear rep',
    'rep travado', 'ponto travado', 'desbloqueio'
  ];

  const deveAtivarFluxo = palavrasProblemaPonto.some(palavra => texto.includes(palavra));

  if (!deveAtivarFluxo) {
    return { deveResponder: false };
  }

  // ‚úÖ ATIVA O FLUXO DE DESBLOQUEIO
  usuariosEmFluxoREP.set(sender, {
    etapa: 'aguardando_imagem',
    tentativas: 0,
    dados: {}
  });

  return {
    deveResponder: true,
    resposta: `üîß **Identifiquei um problema no ponto!**\n\n` +
      `üì∏ **Para ajudar, preciso que voc√™ envie uma FOTO do REP** mostrando:\n\n` +
      `‚Ä¢ **N√∫mero do REP** (15-18 d√≠gitos)\n` +
      `‚Ä¢ **Senha/Contra Senha** (10 d√≠gitos)\n\n` +
      `_Com essas informa√ß√µes, posso acessar o sistema e ajudar no desbloqueio!_`
  };
}

/**
 * VERIFICAR CONSULTA DE FUNCION√ÅRIO
 */
async function verificarConsultaFuncionario(mensagem, sender) {
  const texto = mensagem.toLowerCase().trim();

  const palavrasConsultaFuncionario = [
    'consultar funcion√°rio', 'dados do funcion√°rio', 'matr√≠cula',
    'cargo', 'dados cadastrais', 'informa√ß√µes do funcion√°rio',
    'funcion√°rio', 'colaborador', 'ficha do funcion√°rio'
  ];

  const deveAtivarFluxo = palavrasConsultaFuncionario.some(palavra => texto.includes(palavra));

  if (!deveAtivarFluxo) {
    return { deveResponder: false };
  }

  // ‚úÖ ATIVA O FLUXO DE CONSULTA
  usuariosEmConsultaFuncionario.set(sender, {
    etapa: 'aguardando_nome',
    tentativas: 0
  });

  return {
    deveResponder: true,
    resposta: `üë§ **Consulta de Funcion√°rio**\n\n` +
      `üìù Por favor, digite o *nome completo* do funcion√°rio que deseja consultar:`
  };
}

/**
 * PROCESSAR CONSULTA DE FUNCION√ÅRIO
 */
async function processarConsultaFuncionario(mensagem, sender, empresa) {
  const fluxoUsuario = usuariosEmConsultaFuncionario.get(sender);

  if (fluxoUsuario.etapa === 'aguardando_nome') {
    const nomeFuncionario = mensagem.trim();

    if (nomeFuncionario.length < 3) {
      fluxoUsuario.tentativas += 1;

      if (fluxoUsuario.tentativas >= 3) {
        usuariosEmConsultaFuncionario.delete(sender);
        return {
          resposta: `‚ùå *M√°ximo de tentativas atingido*\n\n` +
            `Por favor, use o menu para tentar novamente.`
        };
      }

      return {
        resposta: `‚ùå *Nome muito curto*\n\n` +
          `Digite o *nome completo* do funcion√°rio (m√≠nimo 3 caracteres):\n` +
          `_Tentativa ${fluxoUsuario.tentativas} de 3_`
      };
    }

    // ‚úÖ REMOVE DO FLUXO E EXECUTA CONSULTA
    usuariosEmConsultaFuncionario.delete(sender);

    const telefoneLimpo = sender ? sender.replace('@s.whatsapp.net', '').replace(/\D/g, '') : null;

    if (consultarFuncionario && empresa.nome && telefoneLimpo) {
      executarConsultaFuncionario(sender, telefoneLimpo, nomeFuncionario, empresa.nome);
    }

    return {
      resposta: `üîç **Consultando dados de:** ${nomeFuncionario}\n\n` +
        `üìä Estou buscando as informa√ß√µes no sistema...\n` +
        `‚è≥ _Aguarde 1 minuto e lhe retorno da realiza√ß√£o do processo_`
    };
  }

  // ‚úÖ LIMPA FLUXO SE N√ÉO RECONHECIDO
  usuariosEmConsultaFuncionario.delete(sender);
  return { deveResponder: false };
}

/**
 * PROCESSAR FLUXO REP ATIVO
 */
async function processarFluxoREP(mensagem, sender) {
  const fluxoUsuario = usuariosEmFluxoREP.get(sender);

  if (fluxoUsuario.etapa === 'aguardando_imagem') {
    // Usu√°rio enviou texto em vez de imagem
    usuariosEmFluxoREP.delete(sender);
    return {
      resposta: `üì∏ **Preciso de uma FOTO do REP**\n\n` +
        `Para ajudar com o desbloqueio, envie uma imagem mostrando:\n` +
        `‚Ä¢ N√∫mero do REP\n` +
        `‚Ä¢ Senha/Contra Senha\n\n` +
        `_N√£o consigo ler essas informa√ß√µes apenas pelo texto._`
    };
  }

  // ‚úÖ LIMPA FLUXO SE N√ÉO RECONHECIDO
  usuariosEmFluxoREP.delete(sender);
  return { deveResponder: false };
}

/**
 * PROCESSAR MENSAGEM COM IA GEMINI
 */
async function processarMensagemIA(mensagemUsuario, empresa) {
  try {
    const promptCompleto = `${empresa.promptIA}\nUsu√°rio: ${mensagemUsuario}\nIA:`;
    const respostaIA = await gerarRespostaGemini(promptCompleto, mensagemUsuario);

    return {
      resposta: respostaIA
    };
  } catch (error) {
    console.error('‚ùå Erro ao gerar resposta IA:', error);
    return {
      resposta: `ü§ñ **Assistente Lugane AI**\n\n` +
        `No momento, estou com dificuldades t√©cnicas.\n` +
        `Por favor, tente novamente ou entre em contato com o suporte.`
    };
  }
}

/**
 * EXECUTAR DESBLOQUEIO REP
 */
// ‚úÖ FUN√á√ïES DE EXECU√á√ÉO OTIMIZADAS
async function executarDesbloqueioREP(sender, telefoneLimpo, dadosREP, nomeEmpresa) {
  try {
    if (searchInChrome) {
      console.log(`üåê Iniciando desbloqueio REP em background: ${telefoneLimpo}`);

      const callbackResultado = async (mensagem) => {
        try {
          console.log(`üì§ Enviando resultado desbloqueio: ${telefoneLimpo}`);
          await enviarMensagemWhatsApp(sender, mensagem, null, nomeEmpresa);
        } catch (error) {
          console.error('‚ùå Erro callback desbloqueio:', error);
          // Fallback
          await enviarMensagemWhatsApp(
            sender,
            '‚úÖ Processo de desbloqueio conclu√≠do. Verifique o sistema.',
            null,
            nomeEmpresa
          );
        }
      };

      // ‚úÖ EXECUTA EM BACKGROUND SEM BLOQUEAR
      searchInChrome('desbloqueio rep', true, telefoneLimpo, dadosREP, callbackResultado)
        .then(resultado => {
          console.log(`‚úÖ Desbloqueio finalizado: ${telefoneLimpo}`, resultado.success);
        })
        .catch(async (error) => {
          console.error('‚ùå Erro execu√ß√£o desbloqueio:', error);
          await enviarMensagemWhatsApp(
            sender,
            '‚ùå Erro no processamento do desbloqueio. Tente novamente.',
            null,
            nomeEmpresa
          );
        });

    } else {
      throw new Error('M√≥dulo DesbloqueioREP n√£o dispon√≠vel');
    }

  } catch (error) {
    console.error('‚ùå Erro desbloqueio REP:', error);
    await enviarMensagemWhatsApp(
      sender,
      '‚ùå Servi√ßo temporariamente indispon√≠vel. Tente novamente em alguns minutos.',
      null,
      nomeEmpresa
    );
  }
}

async function executarConsultaFuncionario(sender, telefoneLimpo, nomeFuncionario, nomeEmpresa) {
  try {
    if (consultarFuncionario) {
      console.log(`üë§ Iniciando consulta funcion√°rio em background: ${telefoneLimpo}`);

      const callbackResultado = async (mensagem) => {
        try {
          console.log(`üì§ Enviando resultado consulta: ${telefoneLimpo}`);
          await enviarMensagemWhatsApp(sender, mensagem, null, nomeEmpresa);
        } catch (error) {
          console.error('‚ùå Erro callback consulta:', error);
          await enviarMensagemWhatsApp(
            sender,
            '‚úÖ Processo de consulta conclu√≠do.',
            null,
            nomeEmpresa
          );
        }
      };

      // ‚úÖ EXECUTA EM BACKGROUND
      consultarFuncionario(nomeFuncionario, true, telefoneLimpo, callbackResultado)
        .then(resultado => {
          console.log(`‚úÖ Consulta finalizada: ${telefoneLimpo}`, resultado.success);
        })
        .catch(async (error) => {
          console.error('‚ùå Erro execu√ß√£o consulta:', error);
          await enviarMensagemWhatsApp(
            sender,
            '‚ùå Erro na consulta. Tente novamente.',
            null,
            nomeEmpresa
          );
        });

    } else {
      throw new Error('M√≥dulo CadastroFuncionarios n√£o dispon√≠vel');
    }

  } catch (error) {
    console.error('‚ùå Erro consulta funcion√°rio:', error);
    await enviarMensagemWhatsApp(
      sender,
      '‚ùå Servi√ßo de consulta indispon√≠vel. Tente novamente em alguns minutos.',
      null,
      nomeEmpresa
    );
  }
}

/**
 * ENVIAR MENSAGEM VIA WHATSAPP
 */
async function enviarMensagemWhatsApp(sender, mensagem, imagemBuffer = null, nomeEmpresa) {
  try {
    console.log(`üì§ Enviando mensagem para ${sender}`);

    await enviarMensagemParaContato(nomeEmpresa, sender, mensagem, imagemBuffer);

    console.log('‚úÖ Mensagem enviada com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem WhatsApp:', error);
    return false;
  }
}

// ‚úÖ EXPORTA√á√ïES PARA INTEGRA√á√ÉO COM BOTMANAGER
module.exports = handleMensagem;
module.exports.usuariosEmFluxoREP = usuariosEmFluxoREP;
module.exports.usuariosEmConsultaFuncionario = usuariosEmConsultaFuncionario;