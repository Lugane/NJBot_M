// backend/handlers/chatbot.js
const Empresa = require('../models/Empresa');
const { gerarRespostaGemini } = require('../gemini');
const { processarImagemOCR, gerarRespostaOCR } = require('./ocrHandler');

// Importa√ß√£o condicional para evitar erro de m√≥dulo
let searchInChrome;
try {
  const chromeModule = require('../DesbloqueioREP');
  searchInChrome = chromeModule.searchInChrome;
} catch (error) {
  console.log('‚ö†Ô∏è M√≥dulo DesbloqueioREP n√£o encontrado, funcionalidade de pesquisa desativada');
  searchInChrome = null;
}

// Vari√°vel para controlar estado da conversa
const usuariosEmFluxoREP = new Map();

async function handleMensagem(empresaId, mensagemUsuario, sender = null, isMedia = false, mediaBuffer = null) {
  try {
    const empresa = await Empresa.findById(empresaId);
    if (!empresa) return { resposta: '‚ö†Ô∏è Empresa n√£o encontrada.' };

    // ‚úÖ 1. PRIMEIRO: Verifica se √© uma IMAGEM do REP
    if (isMedia && mediaBuffer) {
      return await processarImagemREP(mediaBuffer, sender);
    }

    // ‚úÖ 2. SEGUNDO: Verifica se usu√°rio est√° em fluxo ativo
    if (usuariosEmFluxoREP.has(sender)) {
      return await continuarFluxoREP(mensagemUsuario, sender);
    }

    // ‚úÖ 3. TERCEIRO: Verifica se √© problema no ponto (ativa fluxo)
    const resultadoProblemaPonto = await verificarProblemaPonto(mensagemUsuario, sender);
    if (resultadoProblemaPonto.deveResponder) {
      return { resposta: resultadoProblemaPonto.resposta };
    }

    // ‚úÖ 4. QUARTO: Usa IA normal para outras mensagens
    const promptCompleto = `${empresa.promptIA}\nUsu√°rio: ${mensagemUsuario}\nIA:`;
    const respostaIA = await gerarRespostaGemini(promptCompleto, mensagemUsuario);

    return {
      resposta: respostaIA
    };
  } catch (error) {
    console.error('‚ùå Erro no handleMensagem:', error);
    return { resposta: '‚ö†Ô∏è Ocorreu um erro ao processar sua mensagem.' };
  }
}

// ‚úÖ FUN√á√ÉO PARA VERIFICAR PROBLEMAS NO PONTO
async function verificarProblemaPonto(mensagem, sender) {
  const texto = mensagem.toLowerCase().trim();
  
  // PALAVRAS-CHAVE QUE ATIVAM O FLUXO DE PROBLEMAS NO PONTO
  const palavrasProblemaPonto = [
    'n√£o acessa', 'ponto n√£o acessa', 'ponto parou', 'ponto bloqueado', 
    'problema no ponto', 'problema ponto', 'ponto com erro', 'erro no ponto',
    'rep bloqueado', 'rep n√£o funciona', '1602', '1603', 'desbloquear rep',
    'rep travado', 'ponto travado'
  ];
  
  const deveAtivarFluxo = palavrasProblemaPonto.some(palavra => texto.includes(palavra));
  
  if (!deveAtivarFluxo) {
    return { deveResponder: false };
  }

  // ATIVA O FLUXO PARA ESTE USU√ÅRIO
  usuariosEmFluxoREP.set(sender, {
    etapa: 'aguardando_imagem',
    tentativas: 0,
    dados: {}
  });

  return { 
    deveResponder: true, 
    resposta: `üîß **Identifiquei um problema no ponto!**\n\n` +
              `üì∏ **Para ajudar, preciso que voc√™ envie uma FOTO do REP** mostrando:\n\n` +
              `‚Ä¢ **N√∫mero do REP**\n` +
              `‚Ä¢ **Senha/Contra Senha**\n\n` +
              `_Com essas informa√ß√µes, posso acessar o sistema e ajudar no desbloqueio!_`
  };
}

// ‚úÖ FUN√á√ÉO PARA PROCESSAR IMAGEM DO REP
async function processarImagemREP(mediaBuffer, sender) {
  try {
    console.log('üì∏ Processando imagem do REP...');
    
    const resultadoOCR = await processarImagemOCR(mediaBuffer);
    
    // Verifica se conseguiu extrair dados suficientes
    if (resultadoOCR.sucesso && resultadoOCR.dadosREP.numeroREP && resultadoOCR.dadosREP.senha) {
      // ‚úÖ DADOS COMPLETOS - Pode abrir RHID
      const telefoneLimpo = sender ? sender.replace('@s.whatsapp.net', '').replace(/\D/g, '') : null;
      
      // Limpa o fluxo do usu√°rio
      usuariosEmFluxoREP.delete(sender);
      
      // Executa navega√ß√£o em segundo plano
      if (searchInChrome) {
        executarNavegacaoRHID(sender, telefoneLimpo);
      }
      
      // ‚úÖ RESPOSTA NO FORMATO EXATO DAS IMAGENS
      return { 
        resposta: `*Dados identificados:*\nREP: ${resultadoOCR.dadosREP.numeroREP}\nSenha: ${resultadoOCR.dadosREP.senha}\n\n*Processando desbloqueio...*`
      };
      
    } else {
      // ‚ùå DADOS INCOMPLETOS
      const usuarioFluxo = usuariosEmFluxoREP.get(sender) || { tentativas: 0 };
      usuarioFluxo.tentativas += 1;
      usuariosEmFluxoREP.set(sender, usuarioFluxo);
      
      let resposta = '';
      
      if (resultadoOCR.dadosREP.numeroREP || resultadoOCR.dadosREP.senha) {
        // Dados parciais
        resposta = `*Dados parciais identificados:*\n`;
        if (resultadoOCR.dadosREP.numeroREP) resposta += `‚úÖ REP: ${resultadoOCR.dadosREP.numeroREP}\n`;
        else resposta += `‚ùå REP: N√£o identificado\n`;
        
        if (resultadoOCR.dadosREP.senha) resposta += `‚úÖ Senha: ${resultadoOCR.dadosREP.senha}\n`;
        else resposta += `‚ùå Senha: N√£o identificada\n`;
        
        resposta += `\nüì∏ *Envie outra foto mais n√≠tida* para completar os dados.`;
      } else {
        // Nenhum dado encontrado
        resposta = `‚ùå *N√£o consegui identificar os dados do REP*\n\n` +
                 `üì∏ *Envie outra foto mais n√≠tida* mostrando:\n` +
                 `‚Ä¢ N√∫mero do REP\n` +
                 `‚Ä¢ Senha/Contra Senha`;
      }
      
      if (usuarioFluxo.tentativas >= 3) {
        usuariosEmFluxoREP.delete(sender);
        resposta += `\n\nüí° *Sugest√£o:* Tire a foto com melhor ilumina√ß√£o e foco.`;
      }
      
      return { resposta };
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao processar imagem REP:', error);
    return { 
      resposta: '‚ùå Erro ao processar a imagem. Envie uma foto mais n√≠tida do REP.'
    };
  }
}

// ‚úÖ FUN√á√ÉO PARA CONTINUAR FLUXO ATIVO
async function continuarFluxoREP(mensagem, sender) {
  const fluxoUsuario = usuariosEmFluxoREP.get(sender);
  
  if (fluxoUsuario.etapa === 'aguardando_imagem') {
    // Usu√°rio enviou texto em vez de imagem
    usuariosEmFluxoREP.delete(sender);
    return {
      resposta: `üì∏ **Preciso de uma FOTO do REP**\n\n` +
               `Para ajudar com o desbloqueio, envie uma imagem mostrando:\n` +
               `‚Ä¢ N√∫mero do REP\n` +
               `‚Ä¢ Senha/Contra Senha\n\n` +
               `_N√£o consigo ler essas informa√ß√µes apenas pelo texto._`
    };
  }
  
  // Limpa fluxo se n√£o reconhece
  usuariosEmFluxoREP.delete(sender);
  return { deveResponder: false };
}

// ‚úÖ FUN√á√ÉO PARA EXECUTAR NAVEGA√á√ÉO RHID
async function executarNavegacaoRHID(sender, telefoneLimpo) {
  try {
    if (searchInChrome) {
      console.log(`üåê Iniciando navega√ß√£o RHID para: ${telefoneLimpo}`);
      await searchInChrome('desbloqueio rep', false, telefoneLimpo);
      console.log('‚úÖ Navega√ß√£o RHID conclu√≠da');
    }
  } catch (error) {
    console.error('‚ùå Erro na navega√ß√£o RHID:', error);
  }
}

// ‚úÖ FUN√á√ÉO LEGADA (mantida para compatibilidade)
async function executarPesquisaEmSegundoPlano(query, sender, headless = false, telefone = null) {
  try {
    if (searchInChrome) {
      const resultado = await searchInChrome(query, headless, telefone);
      if (resultado.success) {
        console.log(`‚úÖ Navega√ß√£o conclu√≠da para: ${telefone || 'N/A'}`);
      }
    }
  } catch (error) {
    console.error('‚ùå Erro na navega√ß√£o:', error);
  }
}

module.exports = handleMensagem;