// backend/handlers/chatbot.js
const Empresa = require('../models/Empresa');
const { gerarRespostaGemini } = require('../gemini');

// Importa√ß√£o condicional para evitar erro de m√≥dulo
let searchInChrome;
try {
  const chromeModule = require('../chromeAutomation');
  searchInChrome = chromeModule.searchInChrome;
} catch (error) {
  console.log('‚ö†Ô∏è M√≥dulo chromeAutomation n√£o encontrado, funcionalidade de pesquisa desativada');
  searchInChrome = null;
}

async function handleMensagem(empresaId, mensagemUsuario, sender = null) {
  try {
    const empresa = await Empresa.findById(empresaId);
    if (!empresa) return { resposta: '‚ö†Ô∏è Empresa n√£o encontrada.' };

    // Primeiro verifica se √© um comando de pesquisa
    const resultadoPesquisa = await processarComandoPesquisa(mensagemUsuario, sender);
    if (resultadoPesquisa.deveResponder) {
      return { resposta: resultadoPesquisa.resposta };
    }

    // Se n√£o for pesquisa, usa a IA normal
    const promptCompleto = `${empresa.promptIA}\nUsu√°rio: ${mensagemUsuario}\nIA:`;
    const respostaIA = await gerarRespostaGemini(promptCompleto, mensagemUsuario);

    return {
      resposta: respostaIA
    };
  } catch (error) {
    console.error('‚ùå Erro no handleMensagem:', error);
    return { resposta: '‚ö†Ô∏è Ocorreu um erro ao processar sua mensagem.' };
  }
}

// Fun√ß√£o para processar comandos de pesquisa
async function processarComandoPesquisa(mensagem, sender) {
  const texto = mensagem.toLowerCase().trim();
  
  // TODAS AS PALAVRAS-CHAVE QUE ATIVAM A NAVEGA√á√ÉO:
  const palavrasPesquisa = [
    // Pesquisa b√°sica
    // 'pesquisar', 'pesquise', 'buscar', 'procure', 'encontre', 'ache',
    // 'search', 'find', 'lookup',
    
    // Navegadores/sites
    'google', 'navegador', 'chrome', 'internet', 'web', 'site',
    'safari', 'firefox', 'edge', 'explorer',
    
    // A√ß√µes de navega√ß√£o
    // 'abrir', 'acessar', 'navegar', 'visitar', 'ir para', 'v√° para',
    // 'mostrar', 'ver', 'exibir', 'mostre', 'veja',
    
    // Tipos de conte√∫do
    // 'site', 'p√°gina', 'p√°gina web', 'website', 'endere√ßo', 'url',
    // 'link', 'online', 'na web'
  ];
  
  const devePesquisar = palavrasPesquisa.some(palavra => texto.includes(palavra));
  
  if (!devePesquisar || !searchInChrome) {
    return { deveResponder: false };
  }
  
  // Extrai o termo de pesquisa
  let query = extrairQueryDePesquisa(mensagem, palavrasPesquisa);
  
  if (!query) {
    return { 
      deveResponder: true, 
      resposta: 'üîç Por favor, especifique o que voc√™ gostaria que eu pesquise.\n\nExemplo: "pesquisar receitas de bolo" ou "abrir site do YouTube"' 
    };
  }
  
  console.log(`üîç Query extra√≠da: "${query}"`);
  
  try {
    console.log(`üîç Iniciando pesquisa no Chrome VISUAL para: "${query}"`);
    
    // Executa a pesquisa em segundo plano - COM CHROME VISUAL
    if (searchInChrome) {
      executarPesquisaEmSegundoPlano(query, sender, false); // false = Chrome VISUAL
    }
    
    return { 
      deveResponder: true, 
      resposta: `üîç **Abrindo Chrome VISUAL:**\n"${query}"\n\nüìù Estou abrindo o navegador e buscando as informa√ß√µes para voc√™...\n\n_Verifique a tela do computador!_` 
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao processar pesquisa:', error);
    return { 
      deveResponder: true, 
      resposta: `‚ö†Ô∏è Erro ao abrir navegador: ${error.message}` 
    };
  }
}

// Fun√ß√£o para extrair a query
function extrairQueryDePesquisa(mensagem, palavrasPesquisa) {
  let query = mensagem.trim();
  
  // Remove palavras de comando
  palavrasPesquisa.forEach(palavra => {
    const regex = new RegExp(`\\b${palavra}\\b`, 'gi');
    query = query.replace(regex, '');
  });
  
  // Remove palavras comuns
  const palavrasParaRemover = ['por', 'sobre', 'no', 'na', 'sobre o', 'sobre a', 'o site', 'a p√°gina'];
  palavrasParaRemover.forEach(palavra => {
    if (query.toLowerCase().startsWith(palavra + ' ')) {
      query = query.substring(palavra.length).trim();
    }
  });
  
  // Limpa a query
  query = query.replace(/["']/g, '').trim();
  query = query.replace(/[.,!?;:]+$/, '').trim();
  
  return query;
}

// Fun√ß√£o atualizada com par√¢metro headless
async function executarPesquisaEmSegundoPlano(query, sender, headless = false) {
  try {
    const resultado = await searchInChrome(query, headless);
    
    if (resultado.success) {
      console.log(`‚úÖ Pesquisa no Chrome VISUAL conclu√≠da: ${resultado.title}`);
      console.log(`üìã Resultado:\nT√≠tulo: ${resultado.title}\nURL: ${resultado.url}`);
    } else {
      console.error(`‚ùå Falha na pesquisa: ${resultado.error}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro na pesquisa em segundo plano:', error);
  }
}

module.exports = handleMensagem;