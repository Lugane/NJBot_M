const puppeteer = require('puppeteer');

// Vari√°vel para armazenar a fun√ß√£o de callback do WhatsApp
let callbackWhatsApp = null;

// ‚úÖ FUN√á√ÉO PARA VALIDAR SE √â CPF
function isValidCPF(texto) {
  const cpfLimpo = texto.replace(/\D/g, '');
  if (cpfLimpo.length !== 11) return false;
  if (/^(\d)\1{10}$/.test(cpfLimpo)) return false;
  return true;
}

// ‚úÖ FUN√á√ÉO PARA LIMPAR CPF
function limparCPF(cpf) {
  return cpf.replace(/\D/g, '');
}

async function consultarFuncionario(nomeFuncionario, headless = true, telefone = null, callback = null) {
    let browser = null;

    console.log(`üöÄ Iniciando consulta para: "${nomeFuncionario}"`);
    console.log(`üìû Telefone: ${telefone}`);
    console.log(`üñ•Ô∏è Modo headless: ${headless}`);

    // ‚úÖ VERIFICA SE √â CPF OU NOME
    const isCPF = isValidCPF(nomeFuncionario);
    const cpfLimpo = isCPF ? limparCPF(nomeFuncionario) : null;
    
    console.log(`üîç Tipo de busca: ${isCPF ? 'CPF' : 'NOME'}`);
    if (isCPF) {
        console.log(`üìã CPF limpo: ${cpfLimpo}`);
    }

    // ‚úÖ CORRE√á√ÉO: Normaliza o valor de headless (igual no DesbloqueioREP)
    if (typeof headless === 'string') {
        headless = headless.toLowerCase() === 'true' || headless === '1';
    } else {
        headless = Boolean(headless);
    }

    console.log(`üñ•Ô∏è Modo headless DEFINITIVO: ${headless ? 'SIM (sem UI)' : 'N√ÉO (com UI)'}`);

    // ‚úÖ Armazena o callback para enviar mensagens via WhatsApp
    callbackWhatsApp = callback;

    const enviarResposta = async (mensagem) => {
        if (callbackWhatsApp) {
            try {
                await callbackWhatsApp(mensagem);
            } catch (e) {
                console.error('‚ùå Erro ao enviar resposta via callback:', e);
            }
        } else {
            console.log(`[SEM CALLBACK] ${mensagem}`);
        }
    };

    try {
        // ‚úÖ VALIDA√á√ÉO DO NOME/CPF
        if (!nomeFuncionario || nomeFuncionario.trim().length < 3) {
            await enviarResposta(`‚ùå *Erro na consulta:*\n\nInforma√ß√£o muito curta. Por favor, digite o nome completo ou CPF do funcion√°rio.`);
            return;
        }

        // ‚úÖ IMPORTA√á√ÉO DAS CREDENCIAIS
        const { getCredenciaisRHID } = require('./rhidLogins');
        const credenciais = getCredenciaisRHID(telefone, 'menu2');

        if (!credenciais) {
            console.error(`‚ùå Credenciais n√£o encontradas para o telefone ${telefone}`);
            await enviarResposta(`‚ùå *Erro de Autentica√ß√£o*\n\nN√£o foi poss√≠vel encontrar as credenciais de acesso para o seu n√∫mero. Por favor, contate o suporte.`);
            return;
        }

        console.log(`üîë Usando credenciais de: ${credenciais.usuario}`);

        const rhidUrl = `https://www.rhid.com.br/v2/#/login`;

        // ‚úÖ CONFIGURA√á√ÉO DO BROWSER CORRIGIDA (igual ao DesbloqueioREP)
        console.log('üñ•Ô∏è Iniciando navegador...');
        browser = await puppeteer.launch({
            headless: headless,
            defaultViewport: headless ? { width: 1920, height: 1080 } : null,
            args: headless ? [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu'
            ] : ['--start-maximized'],
            ignoreHTTPSErrors: true,
            timeout: 60000
        });

        const pages = await browser.pages();
        let page = pages.length > 0 ? pages[0] : await browser.newPage();

        // ‚úÖ CONFIGURA√á√ÉO DA P√ÅGINA MELHORADA
        if (!headless) {
            await page.setViewport({ width: 1366, height: 768 });
        }
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');

        // ‚úÖ TIMEOUT CONFIGURADO
        page.setDefaultTimeout(60000);
        page.setDefaultNavigationTimeout(60000);

        console.log('üîÑ Navegando para RHID...');

        try {
            // ‚úÖ CORRE√á√ÉO: Usa mesma estrat√©gia de navega√ß√£o do DesbloqueioREP
            await page.goto(rhidUrl, {
                waitUntil: 'networkidle0',
                timeout: 60000
            });
            console.log('‚úÖ P√°gina carregada com sucesso!');

            // Aguarda a p√°gina carregar completamente
            await new Promise(resolve => setTimeout(resolve, 3000));
        } catch (navigationError) {
            console.error('‚ùå Erro ao navegar para a p√°gina:', navigationError);
            await enviarResposta(`‚ùå *Erro de Navega√ß√£o*\n\nN√£o foi poss√≠vel acessar o sistema RHID. Tente novamente em alguns minutos.`);
            return;
        }

        // ‚úÖ VERIFICA SE J√Å EST√Å LOGADO (melhorado)
        const estaLogado = await page.evaluate(() => {
            return !window.location.href.includes('login') && document.querySelector('body:not(.login-page)');
        });

        if (!estaLogado) {
            console.log('‚è≥ Fazendo login...');

            try {
                // ‚úÖ AGUARDA OS CAMPOS DO LOGIN COM M√öLTIPLOS SELECTORS (igual DesbloqueioREP)
                const emailSelectors = [
                    'input[type="email"]',
                    '#email',
                    'input[name="email"]',
                    '[placeholder*="mail"]',
                    '[placeholder*="E-mail"]',
                    'input[type="text"]'
                ];

                const passwordSelectors = [
                    'input[type="password"]',
                    '#password',
                    'input[name="password"]',
                    '[placeholder*="senha"]',
                    '[placeholder*="Senha"]'
                ];

                const submitSelectors = [
                    'button[type="submit"]',
                    'input[type="submit"]',
                    '#m_login_signin_submit',
                    '.btn-primary',
                    'button'
                ];

                // ‚úÖ PREENCHE EMAIL
                let emailField = null;
                for (const selector of emailSelectors) {
                    try {
                        emailField = await page.$(selector);
                        if (emailField) {
                            console.log(`‚úÖ Campo email encontrado: ${selector}`);
                            await emailField.click({ clickCount: 3 });
                            await emailField.type(credenciais.usuario, { delay: 50 });
                            break;
                        }
                    } catch (e) { }
                }

                // ‚úÖ PREENCHE SENHA
                let passwordField = null;
                for (const selector of passwordSelectors) {
                    try {
                        passwordField = await page.$(selector);
                        if (passwordField) {
                            console.log(`‚úÖ Campo senha encontrado: ${selector}`);
                            await passwordField.click({ clickCount: 3 });
                            await passwordField.type(credenciais.senha, { delay: 50 });
                            break;
                        }
                    } catch (e) { }
                }

                // ‚úÖ CLICA NO BOT√ÉO DE LOGIN
                let submitButton = null;
                for (const selector of submitSelectors) {
                    try {
                        submitButton = await page.$(selector);
                        if (submitButton) {
                            console.log(`‚úÖ Bot√£o login encontrado: ${selector}`);
                            await submitButton.click();
                            console.log('‚úÖ Login realizado!');

                            // Aguarda navega√ß√£o
                            await page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 15000 });
                            await new Promise(resolve => setTimeout(resolve, 3000));
                            break;
                        }
                    } catch (e) { }
                }

                if (!emailField || !passwordField) {
                    throw new Error('Campos de login n√£o encontrados');
                }

            } catch (loginError) {
                console.error('‚ùå Erro no login:', loginError);
                await enviarResposta(`‚ùå *Erro de Login*\n\nN√£o foi poss√≠vel fazer login no sistema. Verifique as credenciais.`);
                return;
            }
        }

        // ‚úÖ NAVEGA PARA CADASTROS > FUNCION√ÅRIOS
        console.log('üîç Navegando para Cadastros > Funcion√°rios...');

        try {
            // Aguarda um pouco antes de navegar
            await new Promise(resolve => setTimeout(resolve, 3000));

            // Tenta acessar diretamente a URL de funcion√°rios
            await page.goto('https://www.rhid.com.br/v2/#/list/person', {
                waitUntil: 'networkidle0',
                timeout: 30000
            });

            console.log('‚úÖ P√°gina de funcion√°rios carregada!');

            // Aguarda a tabela carregar
            await new Promise(resolve => setTimeout(resolve, 5000));

        } catch (menuError) {
            console.error('‚ùå Erro ao acessar menu de funcion√°rios:', menuError);
            await enviarResposta(`‚ùå *Erro de Navega√ß√£o*\n\nN√£o foi poss√≠vel acessar a lista de funcion√°rios.`);
            return;
        }

        // ‚úÖ REALIZA A BUSCA (NOME OU CPF)
        console.log(`üîç Buscando por "${isCPF ? 'CPF: ' + cpfLimpo : nomeFuncionario}"...`);

        try {
            if (isCPF) {
                // ‚úÖ BUSCA POR CPF - USA BUSCA AVAN√áADA
                console.log('üìã Iniciando busca avan√ßada por CPF...');

                // 1Ô∏è‚É£ Clica no bot√£o "Busca Avan√ßada"
                await page.waitForSelector('a[ng-click*="buscaAvancadaToogle"]', { timeout: 10000 });
                await page.click('a[ng-click*="buscaAvancadaToogle"]');
                console.log('‚úÖ Bot√£o Busca Avan√ßada clicado');
                await new Promise(resolve => setTimeout(resolve, 2000));

                // 2Ô∏è‚É£ Preenche o campo CPF
                await page.waitForSelector('input[placeholder="CPF"]', { timeout: 10000 });
                const cpfInput = await page.$('input[placeholder="CPF"]');
                await cpfInput.click({ clickCount: 3 });
                await cpfInput.type(cpfLimpo, { delay: 100 });
                console.log('‚úÖ CPF preenchido');
                await new Promise(resolve => setTimeout(resolve, 1000));

                // 3Ô∏è‚É£ Clica no bot√£o "Filtrar"
                await page.waitForSelector('a[ng-click*="filtrarAvancado"]', { timeout: 10000 });
                await page.click('a[ng-click*="filtrarAvancado"]');
                console.log('‚úÖ Bot√£o Filtrar clicado');
                await new Promise(resolve => setTimeout(resolve, 6000));

            } else {
                // ‚úÖ BUSCA POR NOME - USA BUSCA SIMPLES
                console.log('üìù Iniciando busca simples por nome...');
                
                await page.waitForSelector('input[type="search"]', { timeout: 20000 });
                const searchInput = await page.$('input[type="search"]');
                await searchInput.click({ clickCount: 3 });
                await page.keyboard.press('Backspace');
                await searchInput.type(nomeFuncionario, { delay: 100 });
                console.log('‚úÖ Busca realizada');
                await new Promise(resolve => setTimeout(resolve, 6000));
            }

            // ‚úÖ VERIFICA RESULTADOS
            const noResultsFound = await page.$('td.dataTables_empty');

            if (noResultsFound) {
                console.log('‚ùå Funcion√°rio n√£o encontrado na busca.');
                await enviarResposta(
                    `‚ùå *Funcion√°rio n√£o encontrado*\n\n` +
                    `N√£o localizei nenhum registro para ${isCPF ? `CPF: ${cpfLimpo}` : `"${nomeFuncionario}"`}.\n\n` +
                    `Verifique se:\n` +
                    `‚Ä¢ ${isCPF ? 'O CPF est√° correto' : 'O nome est√° correto e completo'}\n` +
                    `‚Ä¢ A ${isCPF ? 'digita√ß√£o est√° exata' : 'grafia est√° exata'}\n` +
                    `‚Ä¢ O funcion√°rio est√° cadastrado no sistema`
                );
            } else {
                console.log('‚úÖ Funcion√°rio encontrado! Extraindo dados...');

                // ‚úÖ 1. CLICA NO BOT√ÉO EDITAR (√≠cone de l√°pis)
                console.log('üîç Procurando bot√£o Editar...');
                try {
                    await page.waitForSelector('a[ng-click*="editItem"]', { timeout: 10000 });
                    await page.click('a[ng-click*="editItem"]');
                    console.log('‚úÖ Bot√£o Editar clicado');
                    await new Promise(resolve => setTimeout(resolve, 3000));
                } catch (editError) {
                    console.error('‚ùå Bot√£o Editar n√£o encontrado:', editError);
                    await enviarResposta(`‚ùå *Erro na Edi√ß√£o*\n\nN√£o foi poss√≠vel acessar os dados do funcion√°rio para edi√ß√£o.`);
                    return;
                }

                // ‚úÖ SE FOR BUSCA POR CPF, CAPTURA O NOME COMPLETO
                let nomeCompleto = nomeFuncionario;
                if (isCPF) {
                    try {
                        console.log('üìù Capturando nome completo do funcion√°rio...');
                        
                        // Aguarda carregar a p√°gina de edi√ß√£o
                        await new Promise(resolve => setTimeout(resolve, 2000));
                        
                        // Busca o campo de nome (geralmente o primeiro input de texto vis√≠vel)
                        nomeCompleto = await page.evaluate(() => {
                            // Tenta v√°rios seletores poss√≠veis para o campo nome
                            const selectors = [
                                'input[ng-model*="nome"]',
                                'input[placeholder*="Nome"]',
                                'input#n_1',
                                'input[name*="nome"]'
                            ];
                            
                            for (const selector of selectors) {
                                const campo = document.querySelector(selector);
                                if (campo && campo.value) {
                                    return campo.value.trim();
                                }
                            }
                            
                            // Fallback: pega o primeiro input type="text" com valor
                            const inputs = document.querySelectorAll('input[type="text"]');
                            for (const input of inputs) {
                                if (input.value && input.value.length > 3) {
                                    return input.value.trim();
                                }
                            }
                            
                            return null;
                        });
                        
                        if (nomeCompleto) {
                            console.log(`‚úÖ Nome capturado: ${nomeCompleto}`);
                        } else {
                            console.log('‚ö†Ô∏è N√£o foi poss√≠vel capturar o nome');
                            nomeCompleto = `CPF ${cpfLimpo}`;
                        }
                    } catch (capturaError) {
                        console.error('‚ùå Erro ao capturar nome:', capturaError);
                        nomeCompleto = `CPF ${cpfLimpo}`;
                    }
                }

                // ‚úÖ 2. CLICA NA ABA "DEMISS√ÉO"
                console.log('üîç Procurando aba Demiss√£o...');
                try {
                    await page.waitForSelector('a.nav-link.m-tabs__link.ng-binding', { timeout: 10000 });

                    // Encontra a aba "Demiss√£o" pelo texto
                    const demissaoTab = await page.evaluateHandle(() => {
                        const tabs = Array.from(document.querySelectorAll('a.nav-link.m-tabs__link.ng-binding'));
                        return tabs.find(tab => tab.textContent.includes('Demiss√£o'));
                    });

                    if (demissaoTab && (await demissaoTab.evaluate(el => el !== null))) {
                        await demissaoTab.click();
                        console.log('‚úÖ Aba Demiss√£o clicada');
                        await new Promise(resolve => setTimeout(resolve, 3000));
                    } else {
                        throw new Error('Aba Demiss√£o n√£o encontrada');
                    }
                } catch (tabError) {
                    console.error('‚ùå Aba Demiss√£o n√£o encontrada:', tabError);
                    await enviarResposta(`‚ùå *Erro na Navega√ß√£o*\n\nN√£o foi poss√≠vel acessar a aba de Demiss√£o.`);
                    return;
                }

                // ‚úÖ 3. CLICA NO √çCONE DE LIXEIRA (limpar dados)
                console.log('üîç Procurando √≠cone de lixeira...');
                try {
                    await page.waitForSelector('a[ng-click*="limpaDemissao"]', { timeout: 10000 });
                    await page.click('a[ng-click*="limpaDemissao"]');
                    console.log('‚úÖ √çcone de lixeira clicado');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                } catch (trashError) {
                    console.error('‚ùå √çcone de lixeira n√£o encontrado:', trashError);
                    await enviarResposta(`‚ùå *Erro na Limpeza*\n\nN√£o foi poss√≠vel limpar os dados de demiss√£o.`);
                    return;
                }

                // ‚úÖ 4. VERIFICA SE O BOT√ÉO "SALVAR" EST√Å VIS√çVEL (sem clicar)
                console.log('üîç Verificando bot√£o Salvar...');
                try {
                    await page.waitForSelector('button#btnSave', { timeout: 10000 });
                    const salvarButton = await page.$('button#btnSave');

                    if (salvarButton) {
                        const buttonText = await page.evaluate(button => button.textContent, salvarButton);
                        console.log(`‚úÖ Bot√£o Salvar encontrado: "${buttonText}"`);

                        // ‚úÖ VERIFICA SE EST√Å VIS√çVEL E HABILITADO (sem clicar)
                        const isVisible = await salvarButton.evaluate(button => {
                            return button.offsetWidth > 0 && button.offsetHeight > 0 &&
                                !button.disabled && window.getComputedStyle(button).display !== 'none';
                        });

                        if (isVisible) {
                            console.log('‚úÖ Bot√£o Salvar est√° vis√≠vel e habilitado - Clicando...');
                            //await salvarButton.click();     // s√≥ desmarcar quando a aplica√ß√£o for para o ar
                            console.log('‚úÖ Bot√£o Salvar clicado com sucesso');
                            await enviarResposta(
                                `‚úÖ *Processo conclu√≠do com sucesso!*\n\n` +
                                `üìù Funcion√°rio: ${nomeCompleto}\n` +
                                `${isCPF ? `üìã CPF: ${cpfLimpo}\n` : ''}` +
                                `üíæ Altera√ß√£o realizado com sucesso!`
                            );
                        } else {
                            console.log('‚ö†Ô∏è Bot√£o Salvar encontrado mas n√£o est√° vis√≠vel/habilitado');
                            await enviarResposta(
                                `‚ö†Ô∏è *Processo parcialmente conclu√≠do*\n\n` +
                                `üìù Funcion√°rio: ${nomeCompleto}\n` +
                                `${isCPF ? `üìã CPF: ${cpfLimpo}\n` : ''}` +
                                `üìã Fluxo executado mas bot√£o Salvar n√£o est√° dispon√≠vel`
                            );
                        }
                    } else {
                        throw new Error('Bot√£o Salvar n√£o encontrado');
                    }
                } catch (saveError) {
                    console.error('‚ùå Bot√£o Salvar n√£o encontrado:', saveError);
                    await enviarResposta(
                        `‚ùå *Erro Final*\n\n` +
                        `Processo executado mas n√£o foi poss√≠vel verificar o bot√£o Salvar.`
                    );
                    return;
                }
            }

        } catch (searchError) {
            console.error('‚ùå Erro na consulta:', searchError);
            await enviarResposta(`‚ùå *Erro na consulta*\n\nFavor selecione novamente o item do menu para proceder.`);
            return;
        }

        // ‚úÖ CORRE√á√ÉO: Fecha o browser em modo headless ap√≥s conclus√£o
        if (headless && browser) {
            console.log('üîí Fechando browser headless...');
            await new Promise(resolve => setTimeout(resolve, 2000));
            await browser.close();
            browser = null;
            console.log('‚úÖ Browser fechado com sucesso');
        }

    } catch (error) {
        console.error("‚ùå Erro cr√≠tico na automa√ß√£o de consulta:", error);
        await enviarResposta(
            `‚ùå *Erro no Sistema*\n\n` +
            `N√£o foi poss√≠vel concluir a consulta para "${nomeFuncionario}" devido a um erro interno.\n\n` +
            `Erro: ${error.message}\n\n` +
            `Por favor, tente novamente mais tarde ou contate o suporte.`
        );
    } finally {
        // ‚úÖ FECHA O BROWSER COM SEGURAN√áA (apenas se n√£o headless)
        if (browser && !headless) {
            try {
                console.log('üîí Fechando navegador...');
                await browser.close();
                console.log('‚úÖ Navegador fechado com sucesso');
            } catch (closeError) {
                console.error('‚ùå Erro ao fechar navegador:', closeError);
            }
        }
    }
}

module.exports = { consultarFuncionario };